E-1.1  Tasks of the Kernel
   The first bullet says :
     "For example, when the kernel addresses a hard disk, it must decide
which path to use to copy data from disk to memory, where the data reside, which commands
must be sent to the disk via which path, and so on."
   Perharps it wanted to say :
      "For example, when the kernel addresses a hard disk, it must decide :
which path to use to copy data from memory (where the data reside) to disk ,
which commands must be sent to the disk via which path, 
and so on. "

Q-1.3.1 Processes, Task Switching, and Scheduling
"Each process is assigned address space in the virtual memory of the CPU".
So does this mean that there is a cοncept of virtual memory for the CPU also? 

Ε-1.3.2 UNIX Processes
  " 1. fork 
    ..... ...                          ..... Linux uses a well-known
technique known as copy on write that allows it to make the operation much more efficient
by deferring the copy operations until either parent or child writes to a page — read-only
accessed can be satisfied from the same page for both."
I suppose that the grammatically correct end of the sentence would be 
    " - read-only accesses can be satisfied from the same page for both (parent and child)."
    
I-1.3.3 Address Spaces and Privilege Levels
(page 9) Privilege Levels
I am rephrasing the paragraph for more clarity and better flow of reading:  
     Original text 
"Besides executing code on behalf of a user program, the kernel can also be activated by asynchronous
hardware interrupts, and is then said to run in interrupt context. The main difference to running in process
context is that the userspace portion of the virtual address space must not be accessed. Because interrupts
occur at random times, a random userland process is active when an interrupt occurs, and since the
interrupt will most likely be unconnected with the cause of the interrupt, the kernel has no business
with the contents of the current userspace. When operating in interrupt context, the kernel must be more
cautious than normal; for instance, it must not go to sleep."
    My suggestion 
Besides executing code on behalf of a user program, the kernel can also be activated by asynchronous
hardware interrupts, and is then said to run in interrupt context. The main difference to running in process
context is that ,in interrupt context, the userspace portion of the virtual address space must not be accessed. 
Interrupts occur at random times, so some random userland process will happen to be active when an interrupt occurs, 
and since the interrupt will most likely be unconnected with the cause of the interrupt, the kernel has no business
with the contents of the current userspace. When operating in interrupt context, the kernel must be more
cautious than normal; for instance, it must not go to sleep.

(page 10) 
To find the kernel threads in a multi-processor system we can use the command
ps fax | grep /*]$
and if we want to find specifically the kthreads under processor 0,1,2,3  for example , we can use respectively
ps fax | grep /*]$ | grep /0]
ps fax | grep /*]$ | grep /1] 
...
ps fax | grep /*]$ | grep /3]


E-Figure 1-6: Virtual and physical addresses.
The text under Figure says : 
"Physical pages are often called page frames. In contrast, the term page is reserved for pages in virtual
address space." 
Then the single Page Frame at the right part of the Figure should have dark-gray color , like the one used in 
depicting RAM , and not light-gray color. 

Q-(page 11)
   In the next paragraph the text mentions : 
"Page 5 of A and page 1 of B both point to the physical page frame 5. This is possible because
entries in both virtual address spaces (albeit at different positions) point to the same page."
   But for me this is not an explanation , it is just a restatement of the event. I would prefer something like :
Page 5 of A and page 1 of B both point to the physical page frame 5. So we see that it is possible for
entries in  virtual address spaces of both processes (albeit at different positions) to  point to the same page frame.
Why can this happen? Because .... (and a sinple explanation should follow)


E-1.3.14 Object Management and Reference Counting
page 24 , Sets of Objects
   The text after the code snippet says :
"Since the management structure for sets is nothing other than a kernel object, 
it can be managed via the previously discussed struct kobj.".
   Of cource the correct would be : 
"Since the management structure for sets is nothing other than a kernel object, 
it can be managed via the previously discussed struct kobject.".

E-1.5 Some Notes on Presentation
(page 30) the text is 
"The kernel has to deal with this situation somehow, usually by returning an error return
code to userspace if a task is performed as a response to a request by an application, or by omitting a
warning message to the system log."
    It seems that the writer wanted to say emitting and not omitting:
"The kernel has to deal with this situation somehow, usually by returning an error return
code to userspace if a task is performed as a response to a request by an application, or by emitting a
warning message to the system log."







